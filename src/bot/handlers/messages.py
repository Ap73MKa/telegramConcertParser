from collections.abc import Sequence
from random import choices

from src.config import configure
from src.database import City, Concert

MAX_NAME_LEN = 40


class Messages:
    SITE_INFO = (
        f"<b><a href='https://{configure.bot.kassir_site}'>Kassir</a></b> - —Å–∞–π—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã –∏ —É–∑–Ω–∞–µ–º "
        "–≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é o6 –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö. –ï—Å–ª–∏ –≤–∞–º –Ω–µ—É–¥–æ–±–µ–Ω –Ω–∞—à –±–æ—Ç, —Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–æ–≤—É—é "
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ ü§î"
    )
    BOT_INTRODUCTION = (
        "<b>tgConcerts</b> - —ç—Ç–æ –æ—Å–æ–±—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        " o –≤—Å–µ—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å"
        " –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏ <b>/start</b>"
    )
    PREFACE_CONCERT_LIST = (
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:"
    )
    ERR_CONCERT_LIST = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞"
    )
    ERR_CITY_LIST = "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ERR_MAIN_MENU = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é."

    @staticmethod
    def get_bot_info(cities: Sequence[City]) -> str:
        if not cities:
            return Messages.BOT_INTRODUCTION
        city_count = len(cities)
        random_cities = [city.name for city in choices(cities, k=6)]
        random_cities_text = "\n".join([f"‚Ä¢ {city}" for city in random_cities])
        return f"{Messages.BOT_INTRODUCTION}\n\n Ha –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≥–æ—Ä–æ–¥–∞:\n{random_cities_text}\n –ò –µ—â–µ –±–æ–ª–µ–µ {city_count - 6} –≥–æ—Ä–æ–¥–æ–≤!"

    @staticmethod
    def _format_concert(concert: Concert) -> str:
        truncated_name = (
            concert.name[:37] + "..."
            if len(concert.name) > MAX_NAME_LEN
            else concert.name
        )
        formatted_date = concert.concert_date.strftime("%a, %d %b. %Y")
        formatted_price = f"{concert.price:,.0f}".replace(",", " ") + " ‚ÇΩ"
        return f"{formatted_date}<i> –æ—Ç {formatted_price}</i>\n<b><a href='{concert.link}'>{truncated_name}</a></b>\n"

    @staticmethod
    def get_concert_list(
        current_page: int, max_page: int, concerts: Sequence[Concert], city: City
    ) -> str:
        concert_messages = "\n".join([Messages._format_concert(concert) for concert in concerts])

        city_name = str(city.name).upper()
        city_link = f"https://{city.abb}.{configure.bot.kassir_site}"
        pagination = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ [{current_page}/{max_page}]"
        line_separator = "-" * 5

        return (
            f'<a href="{city_link}">{city_name}</a>. –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤\n\n'
            f"{line_separator} {pagination} {line_separator}\n\n\n{concert_messages}"
        )

    @staticmethod
    def get_welcome(user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        return f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–îa–≤a–π —É–∑–Ω–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã"

    @staticmethod
    def get_update_time(time: float) -> str:
        return f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\nB—ã–øo–ª–Ωe–Ωo –∑–∞: {time:.1f} —Å–µ–∫."
